-- 사용자 테이블 (id=1에 관리자 계정 저장)
DROP TABLE IF EXISTS USERS;
CREATE TABLE USERS (
                       id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       nick_name VARCHAR(30),
                       email VARCHAR(50) NOT NULL UNIQUE,
                       password VARCHAR(60) NOT NULL,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       image VARCHAR(255),
                       role VARCHAR(255),
                       refresh_token VARCHAR(255),
                       journal_count BIGINT,
                       last_healing_program VARCHAR(255),
                       last_healing_date VARCHAR(255),
                       active BOOLEAN
);
--사용자 문의 테이블
drop table if exists user_inquiry;
CREATE TABLE user_inquiry (
                              id BIGINT AUTO_INCREMENT PRIMARY KEY,
                              user_id BIGINT NOT NULL,
                              title TEXT NOT NULL,
                              message TEXT NOT NULL,
                              file TEXT NOT NULL,
                              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                              status ENUM('OPEN', 'ANSWERED', 'CLOSED') DEFAULT 'OPEN',
                              FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
--관리자 답변 테이블
drop table if exists admin_answer;
CREATE TABLE admin_answer (
                              id BIGINT AUTO_INCREMENT PRIMARY KEY,
                              inquiry_id BIGINT NOT NULL,
                              title TEXT NOT NULL,
                              answer TEXT NOT NULL,
                              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                              FOREIGN KEY (inquiry_id) REFERENCES user_inquiry(id) ON DELETE CASCADE
                          );
--힐링 프로그램 테이블
drop table if exists healing_program;
CREATE TABLE healing_program (
                                 id BIGINT AUTO_INCREMENT PRIMARY KEY,
                                 name VARCHAR(255) NOT NULL,
                                 description TEXT,
                                 created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                 updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

--통계용 로그저장 테이블
drop table if exists user_activity_log;
CREATE TABLE user_activity_log (
                                   id BIGINT AUTO_INCREMENT PRIMARY KEY,         --
                                   user_id BIGINT NOT NULL,
                                   activity_type VARCHAR(50) NOT NULL,            -- 로그 유형 (login, diary_creation, healing_program_execution 등)
                                   target_id BIGINT,                             -- 관련된 대상 ID (예: 일기 ID, 프로그램 ID 등)
                                   activity_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- 활동 시간
                                   details TEXT,                                  -- 상세 정보 (예: 일기 내용, 프로그램 이름 등)
                                   FOREIGN KEY (user_id) REFERENCES users(id)    -- 사용자 정보와 연결0
);
--일기 테이블
drop table if exists diary;
CREATE TABLE diary (
                       id BIGINT AUTO_INCREMENT PRIMARY KEY,
                       user_id BIGINT NOT NULL,
                       summary TEXT NOT NULL,                               -- 요약된 일기 내용
                       sentiment_score DECIMAL(5,2),                        -- 감정 분석 점수 (예: 0.0 ~ 1.0)
                       sentiment_category_3 ENUM( 'POSITIVE', 'NEGATIVE', 'NEUTRAL'),  -- 3분류 감정 (긍정, 부정, 중립)
                       sentiment_category_7 ENUM( 'NEUTRAL', 'JOY', 'SADNESS', 'ANGER', 'FEAR', 'SURPRISE', 'CONTEMPT'), -- 7분류 감정
                       healing_programs TEXT,                               -- 사용한 힐링 프로그램 (프로그램 ID 목록 등, 예: '1, 2, 3')
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,      -- 일기 작성일
                       updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                       FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
                   );

